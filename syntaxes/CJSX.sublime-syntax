%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

name: CJSX
file_extensions: [ cjsx, coffee.cjsx ]
scope: source.cjsx

variables:
  cjsxIdent: '[_a-zA-Z][-.:\w]*'

contexts:
  main:
    - match: '(<)({{cjsxIdent}})'
      captures:
        1: punctuation.definition.tag.begin.cjsx
        2: entity.name.tag.cjsx
      set:
        - meta_scope: tag.open.cjsx
        - match: '(?=[_$a-zA-Z][-$\w]*)'
          comment: 'look ahead so each attribute can be matched'
          push:
            - meta_scope: meta.tag.attribute.cjsx
            - match: '[_$a-zA-Z][-$\w]*'
              scope: entity.other.attribute-name.cjsx
            - match: '='
              scope: keyword.operator.assignment.cjsx
            - include: strings
            - include: embedded-cjsx
            - match: (?=/?>)
              comment: 'look ahead to see if open tag is ending yet'
              pop: true
        - match: '/>'
          comment: 'self-closing'
          scope: punctuation.definition.tag.end.cjsx
          pop: true
        - match: '>'
          comment: 'end of open tag'
          scope: punctuation.definition.tag.end.cjsx
          set:
            - include: escaped-character
            - include: html-entity
            - include: embedded-cjsx
            - match: '(?=<{{cjsxIdent}})'
              comment: 'look ahead for a nested cjsx element'
              push: main
            - match: '(</)({{cjsxIdent}})(>)'
              scope: tag.close.cjsx
              captures:
                1: punctuation.definition.tag.begin.cjsx
                2: entity.name.tag.cjsx
                3: punctuation.definition.tag.end.cjsx
              pop: true
            - match: '(<\s*>)|(<\/\s*>)'
              scope: invalid.illegal.tag.incomplete.cjsx
    - include: 'scope:source.coffee'

  embedded-cjsx:
    - match: '{'
      scope: punctuation.definition.brace.curly.start.cjsx
      push:
        - meta_scope: meta.brace.curly.cjsx source.cjsx.embedded.source
        - match: '}'
          scope: punctuation.definition.brace.curly.end.cjsx
          pop: true
        - include: main

  escaped-character:
    - match: '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
      scope: constant.character.escape.cjsx

  html-entity:
    - match: '(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)'
      scope: constant.character.entity.cjsx
      captures:
        1: punctuation.definition.entity.cjsx
        3: punctuation.definition.entity.cjsx
    - match: '&'
      scope: invalid.illegal.bad-ampersand.cjsx

  strings:
    - match: "'"
      scope: punctuation.definition.string.begin.cjsx
      push:
        - meta_scope: string.quoted.single.cjsx
        - match: "'"
          scope: punctuation.definition.string.end.cjsx
          pop: true
        - include: escaped-character
        - include: html-entity
    - match: '"'
      scope: punctuation.definition.string.begin.cjsx
      push:
        - meta_scope: string.quoted.double.cjsx
        - match: '"'
          scope: punctuation.definition.string.end.cjsx
          pop: true
        - include: escaped-character
        - include: html-entity
        - match: '\#\{'
          scope: punctuation.section.embedded.begin.cjsx
          push:
            - meta_scope: source.coffee.embedded.source
            - match: '\}'
              scope: punctuation.section.embedded.end.cjsx
              pop: true
            - include: 'scope:source.coffee'
