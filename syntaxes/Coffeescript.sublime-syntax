%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html

name: CoffeeScript
comment: "CoffeeScript Syntax: version 2.x - WIP - slowly modifying as I come across bits that annoy me"
file_extensions: [ coffee, Cakefile, cson ]
first_line_match: ^#!.*\bcoffee
scope: source.coffee

variables:
  identifier_start: '[_$\p{L}\p{Nl}]' # Taken from javascript
  identifier_part: '[_$\p{L}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\x{200C}\x{200D}]' # Taken from javascript
  identifier_break: (?!{{identifier_part}}) # Taken from javascript

  identifier: '{{identifier_start}}{{identifier_part}}*{{identifier_break}}' # Taken from javascript
  constant_identifier: '[[:upper:]]{{identifier_part}}*{{identifier_break}}' # Taken from javascript

contexts:
  main:
    - match: '(\([^()]*?\))\s*([=-]>)'
      comment: "match stuff like: a -> â€¦"
      scope: meta.inline.function.coffee
      captures:
        1: variable.parameter.function.coffee
        2: storage.type.function.coffee
    - match: (new)\s+(\w+(?:\.\w*)*)
      scope: meta.class.instance.constructor
      captures:
        1: keyword.operator.new.coffee
        2: support.class.coffee
    - include: block-string-single
    - include: block-string-double
    - include: embedded-javascript
    - include: block-comment
    - include: line-comment
    - include: block-regex
    - include: regex
    - include: keywords-top-level # taken from javascript
    - match: |-
        (?x)
          \b(?<![\.\$])(
            break|by|catch|continue|else|finally|for|in|of|if|return|yield|switch|
            then|throw|try|unless|when|while|until|loop|do|(?<=for)\s+own
          )(?!\s*:)\b
      scope: keyword.control.coffee
    - match: |-
        (?x)
          and=|or=|!|%|&|\^|\*|\/|(\-)?\-(?!>)|\+\+|\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|
          >>>=|<>|<|>|!|&&|\.\.(\.)?|\?|\||\|\||\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|
          \^=|\b(?<![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)\b
      scope: keyword.operator.coffee
    - include: assignment
    - include: destructuring-assignment
    - match: |-
        (?x)
          (\s*)
          (?=[a-zA-Z\$_@])
          (
            [a-zA-Z\$_@](\w|\$|:|\.)*\s*
            (?=[:=]( (\s*.\( ($)) | (\s*\(.*\) )?\s*([=-]>)))
          )
      scope: meta.function.coffee
      captures:
        2: entity.name.function.coffee
        3: entity.name.function.coffee
        4: variable.parameter.function.coffee
        5: storage.type.function.coffee
    - match: '^\s*(describe|it|app\.(get|post|put|all|del|delete))[^\w]'
      comment: Show well-known functions from Express and Mocha in Go To Symbol view
      push:
        - meta_scope: meta.function.symbols.coffee
        - match: $
          pop: true
        - include: main
    - match: "[=-]>"
      scope: storage.type.function.coffee
    - match: '\b(?<!\.)(true|on|yes)(?!\s*[:=])\b'
      scope: constant.language.boolean.true.coffee
    - match: '\b(?<!\.)(false|off|no)(?!\s*[:=])\b'
      scope: constant.language.boolean.false.coffee
    - match: '\b(?<!\.)null(?!\s*[:=])\b'
      scope: constant.language.null.coffee
    - match: '\b(?<!\.)(this|extends)(?!\s*[:=])\b'
      scope: variable.language.coffee
    - match: '(class\b)\s+(@?[a-zA-Z\$_][\w\.]*)?(?:\s+(extends)\s+(@?[a-zA-Z\$\._][\w\.]*))?'
      scope: meta.class.coffee
      captures:
        1: storage.type.class.coffee
        2: entity.name.type.class.coffee
        3: keyword.control.inheritance.coffee
        4: entity.other.inherited-class.coffee
    - match: \b(debugger|\\)\b
      scope: keyword.other.coffee
    - match: |-
        (?x)\b(
          Array|ArrayBuffer|Blob|Boolean|Date|document
          |event|Float(32|64)Array|Function|
          Int(8|16|32|64)Array|Math|Map|Number|
          Object|Proxy|RegExp|Set|String|WeakMap|
          window|Uint(8|16|32|64)Array|XMLHttpRequest|Symbol
        )\b
      scope: support.class.coffee
    - match: ((?<=console\.)(debug|warn|info|log|error|time|timeEnd|assert))\b
      scope: support.function.console.coffee
    - match: |-
        (?x)\b(
          decodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require
        )\b
      scope: support.function.coffee
    - match: |-
        (?x)((?<=\.)(
          apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|
          isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|
          reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|
          unshift|valueOf
        ))\b
      scope: support.function.method.array.coffee
    - match: |-
        (?x)((?<=Array\.)(
          isArray
        ))\b
      scope: support.function.static.array.coffee
    - match: |-
        (?x)((?<=Object\.)(
          create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|
          getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|
          isnt|keys|preventExtensions|seal
        ))\b
      scope: support.function.static.object.coffee
    - match: |-
        (?x)((?<=Math\.)(
          abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|
          hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|
          tan|tanh|trunc
        ))\b
      scope: support.function.static.math.coffee
    - match: |-
        (?x)((?<=Number\.)(
          is(Finite|Integer|NaN)|toInteger
        ))\b
      scope: support.function.static.number.coffee
    - match: \b(Infinity|NaN|undefined)\b
      scope: constant.language.coffee
    - match: \;
      scope: punctuation.terminator.statement.coffee
    - match: ',[ |\t]*'
      scope: meta.delimiter.object.comma.coffee
    - match: \.
      scope: meta.delimiter.method.period.coffee
    - match: '\{|\}'
      scope: meta.brace.curly.coffee
    - match: \(|\)
      scope: meta.brace.round.coffee
    - match: '\[|\]\s*'
      scope: meta.brace.square.coffee
    - include: instance-variable
    - include: literal-string
    - include: numeric

  # ------------------------------#
  # START - Taken from javascript #
  # ------------------------------#
  else-pop:
    - match: (?=\S)
      pop: true

  immediately-pop:
    - match: ''
      pop: true

  comma-separator:
    - match: ','
      scope: punctuation.separator.comma.coffee

  keywords-top-level:
    - match: import{{identifier_break}}
      scope: keyword.control.import-export.coffee
      push:
        - import-meta
        - import-export-final
        - import-extended

    - match: export{{identifier_break}}
      scope: keyword.control.import-export.coffee
      push:
        - export-meta
        # - export-extended

    - match: (?:export|default|from|as){{identifier_break}}
      scope: keyword.control.import-export.coffee

  import-meta:
    - meta_scope: meta.import.coffee
    - include: immediately-pop

  import-export-alias:
    - match: as{{identifier_break}}
      scope: keyword.control.import-export.coffee
      set:
        - match: default{{identifier_break}}
          scope: keyword.control.import-export.coffee
          pop: true
        - match: '{{identifier}}'
          scope: variable.other.readwrite.coffee
          pop: true
        - include: else-pop
    - include: else-pop

  # MODIFIED - removed the string lookahead, as it wasn't popping the meda.import scope off
  # - changling literal-string to use `set` over `push` worked as well, but mucked with scoping elsewhere
  import-export-final:
    - match: 'from{{identifier_break}}'
      scope: keyword.control.import-export.coffee
    - include: literal-string
    - include: else-pop

  import-extended:
    - match: (?='|")
      pop: true
    - match: (?=\S)
      set:
        - import-list
        - import-export-alias
        - import-item

  import-list:
    - match: ','
      scope: punctuation.separator.comma.coffee
      push:
        - import-export-alias
        - import-item
    - include: else-pop

  import-item:
    - match: '\{'
      scope: punctuation.section.block.coffee
      set: import-brace
    - match: '{{identifier}}'
      scope: variable.other.readwrite.coffee
      pop: true
    - match: '\*'
      scope: constant.other.coffee
      pop: true
    - include: else-pop

  import-brace:
    - meta_scope: meta.block.coffee
    - include: comma-separator
    - match: '\}'
      scope: punctuation.section.block.coffee
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.coffee
      push: import-export-alias
    - match: '\*'
      scope: constant.other.coffee
      push: import-export-alias
    - include: else-pop

  export-meta:
    - meta_scope: meta.export.coffee
    - include: immediately-pop

  # export-extended:
  #   - match: (?:const|let|var){{identifier_break}}
  #     scope: storage.type.coffee
  #     set: expression-statement

  #   - match: (?=class{{identifier_break}})
  #     set: class

  #   - match: (?={{func_lookahead}})
  #     set: function-declaration

  #   - match: 'default{{identifier_break}}'
  #     scope: keyword.control.import-export.coffee
  #     set:
  #       - match: (?=class{{identifier_break}})
  #         set: class

  #       - match: (?={{func_lookahead}})
  #         set: function-declaration

  #       - match: (?=\S)
  #         set: expression-statement

  #   - match: (?=\S)
  #     set:
  #       - import-export-final
  #       - export-list
  #       - import-export-alias
  #       - export-item

  export-list:
    - match: ','
      scope: punctuation.separator.comma.coffee
      push:
        - import-export-alias
        - export-item
    - include: else-pop

  export-item:
    - match: '\{'
      scope: punctuation.section.block.coffee
      set:
        - export-brace
    - match: '{{identifier}}'
      scope: variable.other.readwrite.coffee
      pop: true
    - match: '\*'
      scope: constant.other.coffee
      pop: true
    - include: else-pop

  export-brace:
    - meta_scope: meta.block.coffee
    - include: comma-separator
    - match: '\}'
      scope: punctuation.section.block.coffee
      pop: true
    - match: '{{identifier}}'
      scope: variable.other.readwrite.coffee
      push: import-export-alias
    - match: '\*'
      scope: constant.other.coffee
      push: import-export-alias
    - include: else-pop

  # ----------------------------#
  # END - Taken from javascript #
  # ----------------------------#

  # Shared Contexts
  instance-variable:
    - match: '(@)([a-zA-Z_\$]\w*)?'
      scope: variable.other.readwrite.instance.coffee

  interpolated-coffee:
    - match: '#{'
      scope: punctuation.section.embedded.begin.coffee
      push:
        - meta_scope: source.coffee.embedded.source
        - match: '}'
          scope: punctuation.section.embedded.end.coffee
          pop: true
        - include: main

  escaped-character:
    - match: '\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)'
      scope: constant.character.escape.coffee

  html-entity:
    - match: '(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)'
      scope: constant.character.entity.coffee
      captures:
        1: punctuation.definition.entity.begin.coffee
        3: punctuation.definition.entity.end.coffee
    - match: '&'
      scope: invalid.illegal.bad-ampersand.coffee

  # Contexts separated out for readability
  # Make sure there are (at least some) tests for each of these
  block-string-single:
    - match: "'''"
      scope: punctuation.definition.string.begin.coffee
      push:
        - meta_scope: string.quoted.single.heredoc.coffee
        - match: "'''"
          scope: punctuation.definition.string.end.coffee
          pop: true
        - include: escaped-character
        - include: html-entity

  block-string-double:
    - match: '"""'
      scope: punctuation.definition.string.begin.coffee
      push:
        - meta_scope: string.quoted.double.heredoc.coffee
        - match: '"""'
          scope: punctuation.definition.string.end.coffee
          pop: true
        - include: escaped-character
        - include: html-entity
        - include: interpolated-coffee

  embedded-javascript:
    - match: "`"
      scope: punctuation.definition.string.begin.coffee
      push:
        - meta_scope: string.quoted.script.coffee
        - match: "`"
          scope: punctuation.definition.string.end.coffee
          pop: true
        - include: escaped-character
        - include: html-entity

  block-comment:
    - match: (?<!#)###(?!#)
      scope: punctuation.definition.comment.begin.coffee
      push:
        - meta_scope: comment.block.coffee
        - match: '###(?:[ \t]*\n)'
          scope: punctuation.definition.comment.end.coffee
          pop: true
        - match: '@\w*'
          scope: storage.type.annotation.coffeescript

  line-comment:
    - match: '(#)(?!\{).*$\n?'
      scope: comment.line.number-sign.coffee
      captures:
        1: punctuation.definition.comment.coffee

  block-regex:
    - match: '///'
      scope: punctuation.definition.regex.begin.coffee
      push:
        - meta_scope: string.regexp.block.coffee
        - match: "///[imgy]{0,4}"
          scope: punctuation.definition.regex.end.coffee
          pop: true
        - include: interpolated-coffee
        - match: (?<!\\)(#).*$\n?
          scope: comment.line.number-sign.coffee
          captures:
            1: punctuation.definition.comment.coffee

  regex:
    - match: '/(?![\s=/*+{}?])(\\.|.)*?/[igmy]{0,4}(?![a-zA-Z0-9])'
      scope: string.regexp.coffee

  assignment:
    - match: '([a-zA-Z\$_](\w|\$|\.)*\s*(?!\::)((:)|(=))(?!(\s*\(.*\))?\s*((=|-)>)))'
      scope: variable.assignment.coffee
      captures:
        4: punctuation.separator.key-value
        5: keyword.operator.coffee

  destructuring-assignment:
    - match: '(?<=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])'
      scope: keyword.operator.coffee
      push:
        - meta_scope: meta.variable.assignment.destructured.coffee
        - match: '([\]\}]\s*[:=])'
          scope: keyword.operator.coffee
          pop: true
        # Match other open/close For assignment to nested objects/arrays
        - match: '([\[\{\]\}])'
          scope: keyword.operator.coffee
        - match: '([a-zA-Z\$_]\w*(\.\w+)*)'
          scope: variable.assignment.coffee
        - include: instance-variable

  literal-string:
    - match: "'"
      scope: punctuation.definition.string.begin.coffee
      push:
        - meta_scope: string.quoted.single.coffee
        - match: "'"
          scope: punctuation.definition.string.end.coffee
          pop: true
        - include: escaped-character
        - include: html-entity
    - match: '"'
      scope: punctuation.definition.string.begin.coffee
      push:
        - meta_scope: string.quoted.double.coffee
        - match: '"'
          scope: punctuation.definition.string.end.coffee
          pop: true
        - include: escaped-character
        - include: html-entity
        - include: interpolated-coffee

  numeric:
    - match: '(?<!\$)\b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b'
      scope: constant.numeric.coffee
